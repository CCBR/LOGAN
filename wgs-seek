#!/usr/bin/env python3
# -*- coding: UTF-8 -*-
'''
    PIPELINE TYPE
    Align --PIPE_ALIGN-TRIM ALIGN
    Variant Calls--PIPE_VC-Variant calling step after align
    Germline Calls DV--PIPE_GERMLINE-Germline after align
    QC requires Alignment, Germline--PIPE_QC--After everything
    --PIPE_BAMVC-BAM variant calling only
    --PIPE_TONLY_TRIM-Trim and Align
    --PIPE_TONLY_TRIM-Trim and Align
'''

import argparse,os,time

def parse_args():
    parser = argparse.ArgumentParser(description='Input files')
    parser.add_argument('--fastq',help='FQ Inputs')
    parser.add_argument('--filelist',help="Files input")
    parser.add_argument('--bam',help="Files input")
    parser.add_argument("--mode",help="Mode?")
    parser.add_argument("--paired",help="Paired")
    parser.add_argument('--output',help="Output Directory")
    parser.add_argument('--sample_sheet',help="Sample sheet")
    parser.add_argument("--profile",default="biowulf",help="Biowulf or Local Run")
    parser.add_argument("--resume",action="store_true",default="True",help="Resume previous run?")
    parser.add_argument("--submit",action="store_false",help="Submit to SLURM?",default="False")
    args = parser.parse_args()
    return(args)


    
def main():
    args=parse_args()
    dirname=os.path.dirname(os.path.realpath(__file__))
    outdirname= os.path.basename(os.getcwd())
    c1="#!/usr/bin/bash"
    c2="module load nextflow"
    c3="module load singularity"
    if args.paired:
        if args.mode=="align":
            mode="--PIPE_ALIGN"
        elif args.mode=="vc":
            mode="--PIPE_VC"
        elif args.mode=="germline":
            mode="--PIPE_GERMLINE"
        elif args.mode=="qc":
            mode="--PIPE_QC"
        if args.fastq:
            in1="--fastq_input "+args.fastq
        elif args.filelist:
            in1="--file_input "+args.fileinput
        elif args.bam:
            in1="--bam "+args.bam
        if args.sample_sheet:
            sample_path="--sample_sheet '"+args.sample_sheet+"'"
        else:
            print("missing sample sheet for paired mode!")
    else:
        if args.mode=="align":
            mode="--PIPE_TONLY_ALIGN"
            sample_path=""
            if args.fastq:
                in1="--fastq_input "+args.fastq
            elif args.filelist:
                in1="--file_input "+args.fileinput
        if args.mode=="vc":
            mode="--PIPE_TONLY_VC"
            sample_path=""
            if args.fastq:
                in1="--fastq_input "+args.fastq
            elif args.filelist:
                in1="--file_input "+args.fileinput
    if args.profile=="biowulf":
        profile="-profile biowulf"
    else: 
        profile="-profile local"
    if args.resume:
        resume="-resume"
    else:
        resume=""
    c4=["nextflow run",dirname + '/wgs-seek.nf',"-c "+ dirname +"/nextflow.config",
        in1,profile,resume,sample_path,mode,
        "--output '" +args.output+"'"]
    cmd1=' '.join(c4)
    code=c1+"\n"+c2+"\n"+c3+"\n"+cmd1
    time1=time.strftime("%Y_%m_%d_%H%M%S")
    #outswarmmut='wgs_nf_'+time1+'.slurm'
    outswarmmut=outdirname+"_"+time1+'.slurm'
    with open(outswarmmut, "a") as outfile:
        outfile.write(code+"\n")
    sbatch_mut="sbatch --cpus-per-task=2 --mem=16g --time 10-00:00:00 --partition norm --output submit_"+time1+".log --error error_"+time1+".log --mail-type=BEGIN,TIME_LIMIT_90,END "+outswarmmut 
    if args.submit==True:
        print(sbatch_mut)
        os.system(sbatch_mut)
    else:
        sbatch_out='run_sbatch'+time1+'.sh'
        with open(sbatch_out, "a") as outfile:
            outfile.write(sbatch_mut+"\n")
        print(sbatch_mut)
if __name__=="__main__":
  main()

