process {

    publishDir = [
        path: { task.label ? "${params.outdir}/${task.label.findAll { !it.startsWith('process_') & !it.startsWith('error_') }.join('/')}/${task.process.tokenize(':')[-1].toLowerCase()}" : "${params.outdir}/${task.process.tokenize(':')[-1].toLowerCase()}" },
        mode: params.publish_dir_mode,
        saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
    ]

    errorStrategy = 'finish'

    withName: sequenza {
        publishDir = [
            path: { "${params.outdir}/cnv/sequenza" },
            mode: 'copy'
        ]
    }


    withName: freec_paired {
        publishDir = [
            path: { "${params.outdir}/cnv/freec" },
            mode: 'copy'
        ]
    }

    withName: freec {
        publishDir = [
            path: { "${params.outdir}/cnv/freec" },
            mode: 'copy'
        ]
    }

    withName: 'amber_tonly|amber_tn' {
        publishDir = [
            path: { "${params.outdir}/cnv/amber" },
            mode: 'copy'
        ]
    }

    withName: 'cobalt_tonly|cobalt_tn' {
        publishDir = [
            path: { "${params.outdir}/cnv/cobalt" },
            mode: 'copy'
        ]
    }

    withName: 'purple' {
        publishDir = [
            path: { "${params.outdir}/cnv/purple" },
            mode: 'copy'
        ]
    }

    withName: 'deepvariant_step3|deepvariant_combined|glnexus' {
        publishDir = [
            path: { "${params.outdir}/germline/deepvariant" },
            mode: 'copy'
        ]
        module=['deepvariant/1.4.0']
    }

    withName: 'deepvariant_step1|deepvariant_step2' {
        module = ['deepvariant/1.4.0']
    }

    withName: 'fc_lane' {
        publishDir = [
            path: { "${params.outdir}/QC/fc_lane" },
            mode: 'copy'
        ]
    }

    withName: 'fastq_screen' {
        publishDir = [
            path: { "${params.outdir}/QC/fastq_screen" },
            mode: 'copy'
        ]
    }

    withName: 'kraken' {
        publishDir = [
            path: { "${params.outdir}/QC/kraken" },
            mode: 'copy'
        ]
    }

    withName: 'fastqc' {
        publishDir = [
            path: { "${params.outdir}/QC/fastqc" },
            mode: 'copy'
        ]
    }

    withName: 'qualimap|qualimap_bamqc' {
        publishDir = [
            path: { "${params.outdir}/QC/qualimap" },
            mode: 'copy'
        ]
    }

    withName: 'samtools_flagstats' {
        publishDir = [
            path: { "${params.outdir}/QC/samtools_flagstats" },
            mode: 'copy'
        ]
    }

    withName: 'mosdepth' {
        publishDir = [
            path: { "${params.outdir}/QC/mosdepth" },
            mode: 'copy'
        ]
    }

    withName: 'vcftools' {
        publishDir = [
            path: { "${params.outdir}/QC/vcftools" },
            mode: 'copy'
        ]
    }

    withName: 'collectvariantcallmetrics' {
        publishDir = [
            path: { "${params.outdir}/QC/collectvariantcallmetrics" },
            mode: 'copy'
        ]
    }

    withName: 'bcftools_stats' {
        publishDir = [
            path: { "${params.outdir}/QC/bcftools_stat" },
            mode: 'copy'
        ]
    }

    withName: 'gatk_varianteval' {
        publishDir = [
            path: { "${params.outdir}/QC/gatk_varianteval" },
            mode: 'copy'
        ]
    }

    withName: 'snpeff' {
        publishDir = [
            path: { "${params.outdir}/QC/snpeff" },
            mode: 'copy'
        ]
    }

    withName: 'somalier_extract|somalier_analysis_human|somalier_analysis_mouse' {
        publishDir = [
            path: { "${params.outdir}/QC/somalier" },
            mode: 'copy'
        ]
    }

    withName: 'multiqc' {
        publishDir = [
            path: { "${params.outdir}/QC/multiqc" },
            mode: 'copy'
        ]
    }

    withName: 'svaba_somatic' {
        publishDir = [
            path: { "${params.outdir}/SV/svaba" },
            mode: 'copy'
        ]
    }

    withName: 'svaba_tonly' {
        publishDir = [
            path: { "${params.outdir}/SV/svaba_tonly" },
            mode: 'copy'
        ]
    }

    withName: 'manta_somatic' {
        publishDir = [
            path: { "${params.outdir}/SV/manta" },
            mode: 'copy'
        ]
    }

    withName: 'manta_tonly' {
        publishDir = [
            path: { "${params.outdir}/SV/manta_tonly" },
            mode: 'copy'
        ]
    }
      
    withName: 'annotsv_tn' {
        publishDir = [
            path: { "${params.outdir}/SV/annotated" },
            mode: 'copy'
        ]
    }

    withName: 'annotsv_tonly' {
        publishDir = [
            path: { "${params.outdir}/SV/annotated_tonly" },
            mode: 'copy'
        ]
    }

    withName: 'survivor_sv' {
        publishDir = [
            path: { "${params.outdir}/SV/survivor" },
            mode: 'copy'
        ]
    }

    withName: 'fastp' {
        publishDir = [
            path: { "${params.outdir}/QC/fastp" },
            mode: 'copy',
            pattern: '{*fastp.json,*fastp.html}'
        ]
    }

    withName: 'applybqsr|samtoolsindex' {
        publishDir = [
            path: { "${params.outdir}/bams/BQSR" },
            mode: 'copy'
        ]
    }

    withName: 'contamination_tumoronly|learnreadorientationmodel_tonly|learnreadorientationmodel|mergemut2stats|mergemut2stats_tonly|contamination_paired|mutect2filter' {
        publishDir = [
            path: { "${params.outdir}/vcfs/mutect2" },
            mode: 'copy'
        ]
    }

 withName: 'mutect2filter_tonly' {
        publishDir = [
            path: { "${params.outdir}/vcfs/mutect2_tonly" },
            mode: 'copy'
        ]
    }

 withName: 'annotvep_tonly|annotvep_tn' {
        publishDir = [
            path: { "${params.outdir}/mafs" },
            mode: 'copy'
        ]
            errorStrategy='ignore'
    }

 withName: 'combinemafs_tonly' {
        publishDir = [
            path: { "${params.outdir}/mafs/tumor_only" },
            mode: 'copy'
        ]
    }

 withName: 'combinemafs_tn' {
        publishDir = [
            path: { "${params.outdir}/mafs/paired" },
            mode: 'copy'
        ]
    }

 withName: 'combineVariants|combineVariants_alternative' {
        publishDir = [
            path: { "${params.outdir}/vcfs" },
            mode: 'copy'
        ]
    }

 withName: 'combineVariants_strelka' {
        publishDir = [
            path: { "${params.outdir}/vcfs/strelka" },
            mode: 'copy'
        ]
    }

 withName: 'somaticcombine_tonly' {
        publishDir = [
            path: { "${params.outdir}/vcfs/combined_tonly" },
            mode: 'copy'
        ]
    }

  withName: 'somaticcombine' {
        publishDir = [
            path: { "${params.outdir}/vcfs/combined" },
            mode: 'copy'
        ]
    }   
}
